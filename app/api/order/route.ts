import { NextResponse } from 'next/server'

type Order = {
  name: string
  phone: string
  pickup?: string
  dropoff?: string
  datetime?: string
  notes?: string
  carClass?: string
}

export async function POST(req: Request) {
  try {
    const payload = await req.json()
    const order: Order = payload.order
    const chatHistory: any[] = payload.chatHistory || []

    if (!order || !order.name || !order.phone) {
      return NextResponse.json(
        { ok: false, message: '–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      )
    }

    const results: any = { telegram: null, bitrix: null }

    // ==========================
    // üü° 1) Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    // ==========================
    const tgToken = process.env.TELEGRAM_BOT_TOKEN
    const tgChatId = process.env.TELEGRAM_CHAT_ID

    if (tgToken && tgChatId) {
      try {
        const textLines: string[] = [
          `üöñ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ Bvetra!*`,
          ``,
          `üë§ *–ò–º—è:* ${order.name}`,
          `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${order.phone}`,
          order.pickup ? `üìç *–ü–æ–¥–∞—á–∞:* ${order.pickup}` : '',
          order.dropoff ? `üéØ *–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:* ${order.dropoff}` : '',
          order.datetime ? `üïì *–í—Ä–µ–º—è:* ${order.datetime}` : '',
          order.carClass ? `üöò *–ö–ª–∞—Å—Å –∞–≤—Ç–æ:* ${order.carClass}` : '',
          order.notes ? `üìù *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* ${order.notes}` : '',
          ``,
          `üí¨ *–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:*`,
        ].filter(Boolean)

        const lastMessages = chatHistory.slice(-6)
        for (const m of lastMessages) {
          const who =
            m.role === 'user'
              ? 'üë§ –ö–ª–∏–µ–Ω—Ç'
              : m.role === 'assistant'
              ? 'ü§ñ AI'
              : 'üí¨'
          textLines.push(`${who}: ${m.content}`)
        }

        const tgRes = await fetch(`https://api.telegram.org/bot${tgToken}/sendMessage`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id: tgChatId,
            text: textLines.join('\n'),
            parse_mode: 'Markdown',
          }),
        })

        results.telegram = await tgRes.json()
      } catch (e) {
        console.error('Telegram send error', e)
        results.telegram = { error: String(e) }
      }
    } else {
      results.telegram = {
        skipped: true,
        message: 'TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ —É–∫–∞–∑–∞–Ω—ã',
      }
    }

    // ==========================
    // üü¢ 2) Bitrix24 ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–∞
    // ==========================
    const bitrixWebhook = process.env.BITRIX_WEBHOOK_URL || ''
    if (bitrixWebhook) {
      try {
        const fields: any = {
          TITLE: `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ —Å–∞–π—Ç ‚Äî ${order.name}`,
          NAME: order.name,
          PHONE: [{ VALUE: order.phone, VALUE_TYPE: 'WORK' }],
          COMMENTS: [
            order.pickup ? `–ü–æ–¥–∞—á–∞: ${order.pickup}` : '',
            order.dropoff ? `–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: ${order.dropoff}` : '',
            order.datetime ? `–í—Ä–µ–º—è: ${order.datetime}` : '',
            order.carClass ? `–ö–ª–∞—Å—Å –∞–≤—Ç–æ: ${order.carClass}` : '',
            order.notes ? `–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: ${order.notes}` : '',
          ]
            .filter(Boolean)
            .join('\n'),
        }

        const body = {
          fields,
          params: { REGISTER_SONET_EVENT: 'Y' },
        }

        const br = await fetch(
          `${bitrixWebhook.replace(/\/$/, '')}/crm.lead.add.json`,
          {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(body),
          }
        )

        results.bitrix = await br.json()
      } catch (e) {
        console.error('Bitrix error', e)
        results.bitrix = { error: String(e) }
      }
    } else {
      results.bitrix = {
        skipped: true,
        message: 'BITRIX_WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏',
      }
    }

    // ==========================
    // üü£ 3) –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
    // ==========================
    return NextResponse.json({
      ok: true,
      message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
      results,
    })
  } catch (err) {
    console.error('Order route error', err)
    return NextResponse.json(
      { ok: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞' },
      { status: 500 }
    )
  }
}
